{"nodes":[{"title":"2023-04-22","slug":"__1.++++Daily++++Notes__2023-04-22","shortSummary":"今天刚刚开始用Obsidian，感觉不错。它能够实现文章间的任意跳转，实现人脑一样的神经网络知识体系。这个优点完全吸引到我，准备将自己的所有知识放到这里进行存储。今天首要目的，是对天创进行一个Case Study的outline规划，目前已完成规划，需要对每一个细节文章进行编辑。是完美的一天。哦对了，Youtube关于Obsidian的文章还没看完。明天继续。"},{"title":"2023-04-25","slug":"__1.++++Daily++++Notes__2023-04-25","shortSummary":"#ToDo 已经把Github的SSH设置好了，但是没有设置coding的SSH。今天把手机的版本同步方式解决了，用Mgit去手动同步手机，再用Github desktop和Obsidian插件去更新Obsidian。"},{"title":"2023-04-26","slug":"__1.++++Daily++++Notes__2023-04-26","shortSummary":""},{"title":"2023-05-01","slug":"__1.++++Daily++++Notes__2023-05-01","shortSummary":"今天用了Coding，试了一下，可以无限Pull！牛批我再改一下看看"},{"title":"2023-05-03","slug":"__1.++++Daily++++Notes__2023-05-03","shortSummary":"#StarSchema\n今天学习的是星型模型设计，今天的任务是总结一个框架出来Following is the outline of this course:Data Warehouse BasisData Warehouse ArchitectureDimensional ModelingFactsDimensionsSlowly Changing DimensionsETLProcessToolsETL vs ELTUsing a Data WarehouseOptimizing a Data WarehouseThe Modern Data Warehouse1. Purpose of Building Up a Data WarehouseStore dataAnalyze data2. Data Warehouse Layers[!abstract] THE LAYERSData Source"},{"title":"2023-05-08","slug":"__1.++++Daily++++Notes__2023-05-08","shortSummary":""},{"title":"DBA","slug":"__2.++++Literature++++and++++Topic++++Notes__DBA","shortSummary":"修改数据库LOG大小ALTER DATABASE topscore_bi\n\nMODIFY FILE (NAME='topscore_bi_log', SIZE=80000MB);压缩数据库LOG大小DBCC SHRINKFILE (topscore_bi_log, 100000);查询数据表占用空间大小-- 查询表\nSELECT \n    t.NAME AS TableName,\n    s.Name AS SchemaName,\n    p.rows AS RowCounts,\n    SUM(a.total_pages) * 8 AS TotalSpaceKB, \n  "},{"title":"Prompt Engineer","slug":"__2.++++Literature++++and++++Topic++++Notes__Prompt++++Engineer","shortSummary":"Tactic 1: use delimiters\nUse triple quotes to quote text. - ``` text ````Tactic 2: ask for a structured output"},{"title":"SQL命名标准","slug":"__2.++++Literature++++and++++Topic++++Notes__SQL命名标准","shortSummary":""},{"title":"数仓架构设计","slug":"__2.++++Literature++++and++++Topic++++Notes__数仓架构设计","shortSummary":"SQL Server OLTP Databasein-memory tables"},{"title":"时间管理","slug":"__2.++++Literature++++and++++Topic++++Notes__时间管理","shortSummary":""},{"title":"星型模型设计","slug":"__2.++++Literature++++and++++Topic++++Notes__星型模型设计","shortSummary":"#ToDo 写出星型模型设计理论框架#ToDo 减价的时候，购买Udemy课程进行观看Star Model\nInformation System\nOperational Systems\nBusiness Process (OLTP)\nEntity-relationship model\n高性能的 Insert, Update, Delete 增删改的原子级操作\n随业务更新，抛弃历史信息\nACID原则\nAtomic 原子级\nConsistent 一致性\nIsolated 独立性\nDurable 持续性\n3rd normal form 数据库三范式\n1NF 列不可再分\n2NF 属性完全依赖于主键\n3NF 属性不依赖于其它非主属性    属性直接依赖于主键\nAnalytic Systems\nAnalytic Purpose (OLAP)\n高性能的 Query，整体数据的查询\n历史数据依然保留\nData Warehouse Architecture\nInmon's Corporate Information Factory\nKimball's Dimensional Data Warehouse\nStand-Alone Data"},{"title":"Case Study - 天创","slug":"__3.++++Distilled++++Note__Case++++Study__Case++++Study++++-++++天创","shortSummary":"标签： #CaseStudy #DataWarehouse问题：\n一个标准的数仓建设流程是什么样的？包含了多少种角色？\n什么是数据架构？什么是业务架构？他们之间的的区别是什么？ [[BI数仓项目流程]]框架：\n数据架构中需要做哪些工作？技术架构设计BI技术选型（PBI Pro/PBI Embedded/PBI Report Server/Quick BI/自研开发）数仓技术选型（阿里系MaxCompute底层，SQL Server数据库等）ETL工具选型（Kettle/SSIS/Python）各种技术中的代码最佳实践服务器性能配置网络配置与调优数据架构设计数仓模型设计[[数仓事实表设计]][[数据源标签设计]][[数仓维度表设计]][[ETL Pipeline设计]]可维护性与开发效率[[校验设计]][[Log设计]]功能[[分摊与重分类]]"},{"title":"ETL Pipeline设计","slug":"__3.++++Distilled++++Note__Datawarehouse++++Design__ETL++++Pipeline设计","shortSummary":"按模块设计Pipeline存储过程命名标准与规范参数设计Log设计"},{"title":"Log设计","slug":"__3.++++Distilled++++Note__Datawarehouse++++Design__Log设计","shortSummary":"上传LogETL Pipeline logBI数据刷新 log"},{"title":"数仓事实表设计","slug":"__3.++++Distilled++++Note__Datawarehouse++++Design__数仓事实表设计","shortSummary":"ODS层表格设计DWD层表格设计ADS层表格设计TMP层表格设计"},{"title":"数仓维度表设计","slug":"__3.++++Distilled++++Note__Datawarehouse++++Design__数仓维度表设计","shortSummary":"维度分类已在ERP中存在的维度不完全在ERP中存在的维度维度主键管理：主键在各个系统不统一补充字段信息：维度信息不完善，缺少层级，属性等补充数据信息：维度数据不完善，或维度颗粒度不统一不在ERP中存在的维度维度表设计规则表设计维度生成设计ETL流程触发设计（一旦规则表发生变化）维度拆分与汇总数据模型需求数据量大小按维度自然属性分配[[渐变维度设计]]"},{"title":"数据源标签设计","slug":"__3.++++Distilled++++Note__Datawarehouse++++Design__数据源标签设计","shortSummary":"数据血缘按展示需求方案单表多标签设计单表单标签设计多表多标签设计"},{"title":"校验设计","slug":"__3.++++Distilled++++Note__Datawarehouse++++Design__校验设计","shortSummary":"上传数据校验ETL过程校验维度、规则唯一性校验维度完整性校验数据校验"},{"title":"渐变维度设计","slug":"__3.++++Distilled++++Note__Datawarehouse++++Design__渐变维度设计","shortSummary":"渐变维度（SCD - Slowly Change Dimension）渐变维度（Slowly Change Dimension），简称为SCD，是星型模型建模中常用的一种维度设计方式。SCD一共分为以下几种：| SCD 种类   | 名称描述                           "},{"title":"DBA","slug":"__3.++++Distilled++++Note__DBA","shortSummary":"SQL Server1. Stored Procedure全局查询存储过程关键字SELECT DISTINCT name\nFROM sysobjects o\n    , syscomments s\nWHERE o.id = s.id\n    AND TEXT LIKE '%8%'\n    AND o.xtype = 'P'循环DECLARE @param VARCHAR(10)\n\nDECLARE myCursor CURSOR\nFOR\nSELECT *\nFROM (\n   "},{"title":"21-08-01_init-learning-material","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-01_init-learning-material","shortSummary":"title: 学习资源\nauthor: air.yan\ndate: 2021-08-01 14:23:11\nupdated:\nindex_img: /img/index_img/resources.jpg\ncategory:初出茅庐\ntypora-root-url: ....\\public额外的学习资源可以让你更快的上手，建立更全面的知识体系。这里我会推荐一些我个人认为比较有用的学习资源，以便大家在学习时查漏补缺。学习资源列表文档系列Dax微软官方文档: 蒙圈了第一时间应该查看的网页。Dax文档 by SQLBI：攻略向文档，提供更多的例子与idea。M微软官方文档：Power Query M函数大全，酌情看。Power Platform：包含除了Power BI以外的，Power Platform中的其他应用的文档。致敬大佬儿攻略系列SQLBI官网：Dax大佬Marco Russo & Alberto Ferrari，不多说。Dax Pattern（Dax设计模式）：从dax的应用场景来讲解各种不同的用法。国内攻略系列BI佐罗官网：国内BI技术的天花板，纯技术向+一些应用场景。BI佐罗 - Dax圣经 V2：免费的圣经Online资源，建议想好好学的同学们天天看，看会为止。BI佐罗 - Dax Pattern（Dax设计模式） V2：设计模式包含Dax开发者们总结出的各种复杂使用情景，是进阶与应用的必经之路。PowerBI 星球：高产，模块化知识，简单易懂适合小白。PowerBI 极客：高飞老师总结版圣经，个人认为的观看优先级为：Dax圣经英文原版 > 中文翻译书籍 > 本条。最新PBI信息微软PBI官方博客：主要用来看最新的功能及开发路线Guy in a Cube：各种PBI最新信息，学起来非常有趣。"},{"title":"21-08-01_rank-level","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-01_rank-level","shortSummary":"title: BI天梯段位\nauthor: air.yan\ndate: 2021-08-01 16:25:43\nupdated:\nindex_img: /img/index_img/rank.jpg\ncategory:初出茅庐\ntypora-root-url: ....\\publicBI天梯段位分析，请各位对号入座<!--more-->BI天梯段位L1 - 初级I - 青铜选手介绍入门级选手通常没有任何实战经验可言，即便是入门前看过攻略上过课，也顶多算是理论派选手，我们无法将任何理论经验和实战经验划等号。战斗经验项目数量：0个战斗时长：0年战斗方式必须由他人教学或自主学习的方式进行全方位训练，暂无法进行任何实战。除了自学、教学以外，参加项目进行现场观战，并接受上手们的讲解也算是一份不错的经验。晋级重点在训练到一定程度后，接手老玩家们布置的相对简单的、模块化的、具有重复性及可复制性的作业，并将其出色完成，将成为入门选手晋级的最佳途径。如不幸在此阶段被迫上场，甚至独自面对敌人，那么将会给自身和团队带来巨大的挑战，其结果往往是灾难性的。接受这样的结果后，不管是新人的自信还是老同志的耐心，全部都给我毁灭吧……知识架构基础的Power BI Desktop使用方法基础的财务分析、业务分析知识体系初生牛犊不怕虎的态度与自信L2 - 初级II - 白银选手介绍初级选手是那些在Team帮助下，完成了一个或几个简单项目的选手。此时的选手还不能独自挑战比较困难的BI问题，因此就算处于该阶段的选手越级完成了比较有难度的项目，大概率也是在老玩家的大力扶持下勉强完成。如真有独自完成高难挑战的情况，考虑此选手天赋过人，学习能力超凡，应酌情赋予跳级。战斗经验项目数量：1~3个战斗时长：1年战斗方式简单级别：能够借助老玩家的少量指导，自行完成简单级别的项目。中等级别：能够在老玩家的指挥下，并且得到完整可行的解决方案后，挑战中级难度的项目困难级别：能够在老玩家直接参与项目并带队的情况下，组队挑战困难级别项目，完成Team布置的简单任务，协助完成目标。晋级关键这类选手通过了最初的实战测试，看到了战场的真实模样。无论选手的性格如何，经历过实战的选手的心情反应是激动，是无助还是冷漠，在实战与理论的矛盾冲击中，他们都将面临两个非常重要的问题。一是现实带来的价值观的自我审问，用打工狗的话来讲，工作内容是否符合预期；二是现实项目对他们弱小的知识体系与小心脏带来的无情冲击。如何将BI战场与自我价值观融合，如何通过实战发现知识体系缺陷，想方设法继续提升自我，这两点将成为初级选手是否能够晋升自我的关键。实际上，这个级别上没有太多的技术难点。因此，在这两个晋升关键点上，往往前者占据了的压倒性的位置。如果选手无法在此下定决心前进，那么他的失败或退出将会是注定的。知识架构初级Dax语言理解Calculate的基本应用，配套All忽略函数系列，Filter函数系列时间智能函数的应用If，switch等条件判断的应用能够理解星型模型初级Power Query理解能够做简单的数据转换处理，如透视、逆透视，条件列，字符串处理等初级可视化理解理解可视化图形的不同应用情景理解故事线，运用简单的报告级排版与设计经典案例理解财务利润表建模简版（财务分析初级标准）帕累托模型通用方案（数据分析初级标准）关系型数据库认知ETL认知不忘初心的坚持，稳定心态是关键L3 - 中级I - 黄金选手介绍相对于初级选手，中级选手与他们有两个关键的分水岭，一是扎实的基础知识体系，具备了一定的融会贯通能力，在处理常规或常规变种问题时不再需要老玩家的介入；二是在非高强度时间压力下，中级选手可以独自承担简单项目的开发，并且有能力承担大部分与客户、老板的技术类问题的沟通（此处不包含项目管理类的沟通）。战斗经验项目数量：3~5个，必须包含中等难度的项目战斗时长：1~2年战斗方式简单级别：无压力完成简单级别项目，能够带L1~L2的选手完成简单级别项目。中等级别：能够借助老玩家的少量指导，自行完成中等级别的项目。困难级别：能够在老玩家带队的情况下，承担部分任务，组队挑战困难级别项目。晋级关键这个阶段的选手是在初级知识体系中一步一步学过来的，并且他们在不断的努力下，已经对Dax上下文的理解已经得到了一次升华。但不好意思，这些理解对于高级BI战斗人员来说是远远不够。没错，远远不够的意思是字面意思，非常明确，从中级晋升到高级的条件是异常苛刻的。选手们至少需要满足两个条件，一是高级选手需要从头到尾理解整个Dax的使用逻辑，并且需要达到可以做性能优化的水平，意思是说你需要读完并理解整本Dax圣经，而光是这点还不够；二是高级人员需要具备带队中级项目的能力，这就意味着知识光学到还不够，藏着掖着不能行，还必须具备良好的教学或技术沟通能力。而最最重要的矛盾点在于，中级玩家是Team的中坚力量，也许接到的任务安排会是整个Team中最重最满的。如何更加有效率的做掉项目，并在空余时间打怪升级成为该级别人物晋级的关键。从这个角度来看，这个级别会自动筛除学习效率低下与无法自由安排学习时间的人。关键字，效率。知识架构Dax语言理解行上下文筛选上下文上下文转换变量迭代函数Power Query能够进行Join，Union等操作至少将UI界面中可操作的数据处理全部掌握经典案例理解what-if滚动预测（中级标准）动态日期轴，对标分析（筛选上下文理解）脑洞大开，深入了解Dax语言的魅力L4 - 中级II - 铂金选手介绍绝对的主力，团队中坚力量，掌握着大部分BI知识，离BI知识体系的完备只差一步之遥。战斗经验项目数量：10+，必须包含困难难度的项目战斗时长：3~4年战斗方式简单级别：无压力完成简单级别项目，能够带L1~L2的选手完成简单级别项目。中等级别：无压力完成中等级别项目，能够带L2~L3的选手完成中等级别项目。困难级别：能够在老玩家带队的情况下，承担部分任务，组队挑战困难级别项目。知识架构Dax基础虚拟关系表函数的应用虚拟表的应用Dax部分高级原理Data Lineage 数据沿袭Auto-Exists 自动匹配Advanced Filter Context 上下文进阶Power Query能够创建Function进行部分代码复用能够根据需要进行M函数的编写经典案例理解中国式报表L5 - 高级I - 钻石选手介绍进阶玩家的标准，高阶Dax水平，BI团队的智力核心。战斗经验项目数量：10+，必须包含困难难度的项目战斗时长：4~5年战斗方式简单级别：仅指导。中等级别：仅指导。困难级别：带队挑战困难级别项目。知识架构Dax高级原理Cardinality 基数Materialization 物化Expanded"},{"title":"21-08-01_rank-standard","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-01_rank-standard","shortSummary":"title: BI天梯标准\nauthor: air.yan\ndate: 2021-08-01 16:25:42\nupdated:\nindex_img: /img/index_img/standard.jpg\ncategory:初出茅庐\ntypora-root-url: ....\\publicBI分析人员级别判定标准<!--more-->级别评判标准此标准纯属个人经验之谈，如有巧合纯属雷同 :)此标准可应用于：数据分析师（Data Analyst）商业分析师（Business Analyst）财务分析师（Financial Analyst）不可应用于：数据科学家（Data Scientist）数据库开发（SQL Developer）1. 战斗经验战斗经验分为两种衡量方式：项目数量、战斗时长。按项目数量在乙方机构战斗的玩家们，通常会以咨询、实施、雇佣等各种各样的身份在甲方战斗，并按项目的方式完成任务。这种玩家的经验，通常可以用项目数量与项目难度来进行衡量。按照参战时长在甲方机构战斗的玩家们，由于职业性质，会专注于某一项目的分析，对该项目进行一次一次又一次的迭代，逐渐将其做到完美。该项目时长也许会从几个月到几年的时间不等。用项目数量来判断此类玩家的经验显然不妥，因此这类玩家的经验通常用时长来进行判断。局限性虽然有些团队会以数量与时长来严格玩家段位的高低，但严格来讲，单纯凭借项目数量与战斗时长的堆叠，是 完 全 无 法 使玩家从低级晋级到高阶段位的。玩家的实力本身就是段位的最直接表达，实力则是知识与知识的运用。时间与数量所带来的的经验值本身固然重要，相同时间与数量下，谁能学到，更快学到甚至成指数级理解知识才是玩家实力的体现。下面列示经验值相关的几个隐藏参数：经验值总量 - 知识、技能、经验转化率 - 玩家是否能够转化该阶段经验值，能转化多少。又名理解力转化速度 - 玩家将经验与学习过程转化为知识的速度有多快，又名学习效率转化加速度 - 玩家在成体系的理解后，是否能提升后续知识学习效率，又名知识神经网络就算考虑了以上所有参数，我们也无法完全通过经验及经验吸收本身去完全评判一个玩家的真实实力。天赋、特性、品性、运气以及软实力等，都会多多少少间接或直接影响到玩家的真实水平。因此，除了项目数量与参战时长，我们还需要再了解该玩家目前的知识体系。这样就能大致得到上述所有参数的结果，也就可以大致评判玩家当前的实力以及后续的晋升空间。在认识知识体系前，我们先看一下不同战斗的难度分级，因为相同时间下接触不同难度的经验，玩家会得到截然不同的学习结果。2. 战斗难度分级此处将引入战斗困难级别作为部分玩家的评判标准，这里将用通用的财务利润分析模型的难易度作为举例说明。简单级别该级别体现了使用PBI建模的轻松，主要考验的是初级玩家对基础的理解是否透彻，但对中高级玩家来讲没有任何难度。事实表：利润表结果数据报表项维度：简单的1对多关系，没有时间属性变化其他维度：简单的1对多关系，没有时间属性变化可视化：多维度分析及展现，简单的Dax应用，时间口径的切换中等级别该级别的难度主要体现在可视化分析需求上。要完成某些特定的分析时，需要借助各种dax强大的能力来实现，尤其是筛选上下文的及X系列的迭代函数的理解。数据处理（仅PQ）Excel 多层表头、多维表格的转换，文件夹合并、excel sheet合并等数据库读取事实表：序时账预算数据预测数据报表项维度：多数据源合并过科目 + 辅助核算项等方式定位报表项序时账数据预算数据预测数据报表项维度：需通过科目 + 辅助核算项等方式定位报表项其他维度：有时间属性变化，比如公司版块、业务版块的分类随时间变化可视化不平级利润报表展现预实对比滚动预测what-if分析帕累托分析序时账跨页钻取数据核验表权限管控：一个或多个简单的单维度RLS控制模型部署：PBI云端部署困难级别该级别的任务难度或许已经超出了Dax本身，上升到了一整BI套产品的架构的设计。也许我应该再增加一个噩梦级别，但这样就太过于复杂了。数据处理（SQL或PQ）分摊的数据层处理按优化需求，进行预计算或多表合并等操作各种特殊逻辑的处理事实表：不同结构的序时账数据 + 报表数据预算数据预测数据分摊数据抵消数据报表项维度：需通过科目 + 辅助核算项等方式定位报表项需要综合考虑所有事实表mapping不平级的情况做出设计与选择需要做出不同口径的管报、对外报等报告的切换中国式报表逻辑其他维度：业务版块、集团合并范围随时间变化而变化根据开业时间提供可比不可比选项需要考虑维度与不同数据的颗粒度匹配问题，以此决定页面设计思路可视化诸多口径堆叠的多维分析（时间口径，可比不可比，维度的更新是否可追溯等）中国式报表的复杂展现，多个管报、对外披露的报表展现滚动预测what-if分析杜邦what-if分析（非利润表数据，虽超纲但举例说明）其他分析等等（可视化不是难度重点，主要考虑其带来的底层代码困难程度）性能优化底层数据结构优化数据模型关系优化Dax代码性能优化整体BI架构设计优化权限管控RLS考虑各种角色是否应该看到分摊、抵消等数据等问题数据集作为一个可被分享到不同部门的语义数据模型，考虑不同部门的OLS权限当报告通过Embedded嵌入到其他系统中时，通过前端进行页面级别的权限管控中台数据优化、映射设计：没有完美的数据，没有现成的映射，都要自己去设计好，然后去实现它模型及网关部署方案设计：根据分析需求设计合适的部署方案并实施部署语义数据模型的再应用：需要将模型做成标准化财务模型，以供其他部门直接引用3. 知识体系列表BI知识体系分为几大类，列示如下：BI技能（重点）Dax 建模语言Power"},{"title":"21-08-11_pareto","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-11_pareto","shortSummary":"title: 帕累托算法\nauthor: air.yan\ndate: 2021-08-11 23:15:14\nupdated:\nindex_img: /img/index_img/pareto.jpg\ncategory:案例分析\ntags:\ntypora-root-url: ....\\public帕累托算法是BI经典入门算法之一，它涉及了上下文等诸多知识点，因此非常合适作为第一份学习资料。但在实际运用中，这个简单的算法却又面临着诸多的问题，使我们不得不对它进行优化、更新…… 而这一系列的后续操作，反倒是触及到了高级Dax原理，着实有趣。<!--more-->帕累托分析一、介绍Pareto分析由两个简单的元素组成：自大到小排列的柱状图，反应各个元素的排名情况根据上述排名累计计算的total占比%，一定是一条终点为100%的抛物线这简单的图形里蕴含着极大的分析能力，根据28原则我们能从此图上快速定位到重点元素。原理不多赘述，如需深入了解可点此查看百度百科。二、题目背景如下表所示，已知Dax模型中有一个表叫\"Sales\"，且包含三个字段：order_number，customer，amount| order_number | customer | amount |\n| ------------ | -------- | ------ |\n| ASDF001      | A        | 100   "},{"title":"21-08-16_dynamic-trend","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-16_dynamic-trend","shortSummary":"title: 动态趋势\nauthor: air.yan\ntypora-root-url: ....\\public\ndate: 2021-08-16 22:55:47\nupdated:\nindex_img: /img/index_img/dynamic_trend.bmp\ncategory:案例分析\ntags:趋势分析是报告必备的分析方式，此文将对最常用的动态趋势分析方法进行总结。<!--more-->\t趋势分析在Dax实现中，趋势分析考验的知识点有且只有一个：筛选上下文转换。因此，真正理解了上下文的同学们，收到类似这种需求可以举一反三，随时写出答案；尚未理解的同学们，可以参考此篇文章的思路，摸索上下文的转换逻辑。在财务分析场景中，我们最常见的有月度分析、年度分析、自定义周分析、日分析等等。月度分析最具有典型性，我们就来总结一下月度分析相关的动态趋势图的使用方法。一、简介为了测试，我在模型中建了一份简单的日期表，代码如下：D_date =<br><span class=\"Keyword\" style=\"color:#035aca\">ADDCOLUMNS</span><span class=\"Parenthesis\" style=\"color:#808080\"> (</span><br><span class=\"indent4\">    </span><span class=\"Keyword\" style=\"color:#035aca\">CALENDAR</span><span class=\"Parenthesis\" style=\"color:#808080\"> (</span> <span class=\"StringLiteral\" style=\"color:#D93124\">\"2020/1/1\"</span>, <span class=\"StringLiteral\" style=\"color:#D93124\">\"2024/12/31\"</span> <span class=\"Parenthesis\" style=\"color:#808080\">)</span>,<br><span class=\"indent4\">    </span><span class=\"StringLiteral\" style=\"color:#D93124\">\"Year\"</span>, <span"},{"title":"21-08-23_mixed-model","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-23_mixed-model","shortSummary":"title: 混合模型\nauthor: air.yan\ntypora-root-url: ....\\public\ndate: 2021-09-05 20:34:56\nupdated:\nindex_img: /img/index_img/mixed_model.jpg\ncategory:初出茅庐\ntags:\npublished: true混合模型是微软在2020年12月份上线的里程碑式功能，该功能被网友戏称为BI界的\"圣杯\"，因该功能BI的圣杯之战至此画上了句号，在可预见的未来里没有其他厂······································································································································································································\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDDDDDDDDD\t商能与微软抗衡。<!--more-->混合模型（Composite Model）<img src=\"/img/index_img/Composite Model.png\" alt=\"Composite Model\" style=\"zoom:80%;\" />一、简介数据链接方式分为：ImportDirect QueryLive ConnectionDirect Query for Dataset or Analysis Service模型的种类分为：Import ModelDirect Query ModelLive Connection ModelComposite Model v1.0Composite Model v2.0二、历史模型回顾Connection-Type-Outline*图片来自：https://powerbi.tips/2017/11/power-bi-connections-import/1. Import Mode**通用性：**✳✳✳如果你从来没有了解过这些模式，那么你很可能只用过Import模式，它是PBI默认的数据模式，同时也是功能最强大的一种模式。你所听过的Power BI各种强大的核心引擎，全部指的都是Import。像Vertipaq引擎，内存计算 In-Memory Computing，列储存模式，表格模型 Tabular Model，OLAP(Online Analytical"},{"title":"21-08-26_deployment-choices","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-26_deployment-choices","shortSummary":"title: deployment_choices\nauthor: air.yan\ntypora-root-url: ....\\public\ndate: 2021-08-26 18:48:05\nupdated:\nindex_img:\ncategory:\ntags:\npublished: false摘要<!--more-->Capacity and SKUs in Power BI embedded analyticshttps://docs.microsoft.com/en-us/power-bi/developer/embedded/embedded-capacityPower BI ProPower BI EmbeddedPower BI PremiumPower BI Report Server"},{"title":"21-08-26_rolling-forecast","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-26_rolling-forecast","shortSummary":"title: 滚动预测\nauthor: air.yan\ntypora-root-url: ....\\public\ndate: 2021-08-26 18:40:01\nupdated:\nindex_img: /img/index_img/rolling_forecast.jpg\ncategory:案例分析\ntags:\npublished: true滚动预测是财务经典应用场景之一。在BI中，这个案例考察了BI人员的综合能力，其中较为侧重上下文、变量、参数等应用。相对于 [动态趋势分析] 而言，是在其之上的进阶应用。<!--more-->滚动预测一、介绍之所以滚动预测被称之为“滚动预测”，是因为我们无法完全了解并预测未来的情况，预测的数据需要每过一段时间进行一次更新，预测时间与未来时间的时间间隔越短，预测精准度越高。我们常见的财务预测方式有：每年进行一次或多次，针对整年中每月的预测。每次预测覆盖替换上次预测的数据。每月进行一次预测，预测后N月的数据。因此每月会有N个预测版本。本文中将案例简单化，只针对整年预测进行讲解，不考虑预测版本的影响。**通用性：**✳✳✳预测是每一个企业都会做的事情，因此滚动预测模型的通用性不言而喻。二、 题目背景1. 数据首先，我们会有两张事实表，我们这里分别管它们叫 Fact_act与Fact_fcst，它们分别承载了事实发生的数据及预测发生的数据。这里将两张事实表进行了简化处理，维度只有日期且每月只有1号有一个值，因此颗粒度为月。两张表的结构如下表所示：| date     | value    |\n| -------- | -------- |\n| 2021-1-1 | 201.0498 |\n| 2021-2-1 | 171.7505 |\n| ...   "},{"title":"21-08-26_row-level-security","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-26_row-level-security","shortSummary":"title: RLS案例\nauthor: air.yan\ntypora-root-url: ....\\public\ndate: 2021-08-26 18:47:11\nupdated:\nindex_img: /img/index_img/rls.png\ncategory:案例分析\ntags:RLS（Row-Level Security）是PBI中管控权限最为有效，最为常用的方法。我们不仅可以用他实现最基础的单维度权限分配，还可以实现合并范围权限分配、部分用户数据脱敏、页面级权限管控等非常实用的功能。<!--more-->Row Level Security 行级别安全性一、 权限分配1. 普式RLS应用 & 动态RLS应用最基础的权限分配方式，已经在官网详细记录，具体请参考以下链接：https://docs.microsoft.com/en-us/power-bi/admin/service-admin-rls官网写的很详细啦，最基础的东西不再赘述，请自行查看。如果还是不太清楚的话，网上也有一些基础攻略可以自行google/bing/baidu一下。2. 基于Direct Query to Dataset的RLS应用混合模型yyds！所以混合模型的RLS应用也非常重要。但由于Direct Query to Dataset的概念尚未完成编写，此处待更新，敬请期待~<img src=\"/img/coming_soon.jpg\" style=\"zoom:50%;\" />二、解题方案1. 合并范围权限分配**难易度：**✴✴✴财报、管报的抵消合并本身在财务领域已经算得上是进阶知识，要理解这个概念本身就是一件需要花时间的事情了。在BI中实现合并抵消也并非易事，在建模时，我们要考虑抵消分录与报表项颗粒度的不一致性，还要考虑合并范围层级的建立，以及如何在该层级中加入抵消分录的数据。在此之后，才是合并范围权限分配的考量。如果是集团报告，又要考虑到角色本身是否要被分配到抵消数据，要抵消的情况中，需要被分配哪一级别的抵消。总之非常的难，毫无疑问是超高难度解决方案。**通用性：**✡✡只有集团级财报，业财融合类报告，才会涉及到合并范围的问题。但，反过来说，只要是集团级报告，就会涉及到该问题。解决方案：由于合并范围的解题方案尚未编写，此处待更新，敬请期待~<img src=\"/img/coming_soon.jpg\" style=\"zoom:50%;\" />2.  部分用户数据脱敏**难易度：**✳该解题方式运用到新建表及双向关系的思路，虽比较难以想到，但一旦了解思路，问题便迎刃而解，实施时间也非常短。因此难易度为简单。**通用性：**✳大多数情况下，我们对数据的管控方式就是显示与不显示，因此用简单的RLS即可。但一些情况下，出于某种原因，或是模型的限制或是用户的需求，我们需要让一部分终端用户看到脱敏后的数据，如客户张三显示为张xx，银行卡号显示为1112xxxx3434。但该情况较少见，因此不具备通用性。解题方式：首先，我们需要建立一张与原始表类似的数据表，这里可以任意选择用PQ或Dax去做。下方的例子是脱敏客户名称的过程。原始表信息：| 客户ID | 客户 |\n| ------ | ---- |\n| 1"},{"title":"21-08-26_te3-macro","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-26_te3-macro","shortSummary":"title: te3_macro\nauthor: air.yan\ntypora-root-url: ....\\public\ndate: 2021-08-26 18:47:00\nupdated:\nindex_img:\ncategory:\ntags:\npublished: false摘要<!--more-->https://docs.tabulareditor.com/Advanced-Scripting.htmlC# ScriptModel Properties and Methodshttps://docs.microsoft.com/en-us/dotnet/api/microsoft.analysisservices.tabular.model?redirectedfrom=MSDN&view=analysisservices-dotnetUsefule Snippetshttps://docs.tabulareditor.com/Useful-script-snippets.html自动化可能性固定模型的度量值架构：帕累托动态时间轴滚动预测可比不可比等等……"},{"title":"21-08-27_architecture","slug":"__3.++++Distilled++++Note__Power++++BI__21-08-27_architecture","shortSummary":"title: BI架构调整\nauthor: air.yan\ndate: 2021-08-07 22:33:25\nupdated:\nindex_img: /img/index_img/architecture.png\ncategory:性能优化\ntypora-root-url: ....\\publicPower BI ArchitectureBI架构调整文章尚未完成，待更新……<!--more-->一、为什么要做架构调整我经常和做BI的小伙伴们讲，Dax分析语言理论上是万能的，只要你能想得到的逻辑，它都能给你用它独有的方式实现。在我做BI分析这几年中经历的现实项目中也是如此，只要你够强，脑洞够大，那就没有什么是你写不出来的。但问题就此出现：既然Dax语言如此强大，如此万能，我们是否可以随意应用个星型模型（Star Model）或雪花模型（Snow Model），然后打开脑洞并用万能的dax解决一切呢？嗯…… 只要你的电脑/服务器配置够好，理论上是完全可以的，但就算是理论上说的过去，理论上也有前提的啊，前提是你不要写出什么惊天10层循环SUMX，无敌九连SWITCH套娃，疯狂物化虚拟表…… 总之，不要太离谱。我们实际情况往往是有成本限制的，比如本地开发人员的电脑配置，再比如云端PBI服务上限，数据网关服务器配置等等。这些资源成本的限制，直接将纸上谈兵的理论家打醒，用现实情况告诉你，当你触碰到底线时，性能将决定一切！当我们触碰到性能的天花板时，能否对性能优化到红线以下将直接决定你BI项目的成功或失败。换句话说，在已有资源的前提下，一个连跑都跑不动的BI，我们要你何用？关于性能优化的话题，网上已有不少PBI攻略，但却少见性能向的讲解，Dax圣经一书中也仅在最后几章节中提到。实际上，性能优化是Dax学习中的巅峰，它很重要，非常重要，但本篇文章就是这么任性，不讲Dax性能优化。当在有限的资源下遇到性能问题，实际上我们有两种解决方案：优化模型性能提高性能红线我们将在本文中探讨不同BI架构的性能极限，以及当触碰到这些架构的极限时，该如何通过调整架构来提高性能红线，突破极限。二、定位性能天花板要解决性能天花板的问题，首先我们要了解天花板在哪儿，限制分别是多少。我们在做BI报告时面对的限制主要是两方面的，一是时间限制，二是内存限制，三是储存空间限制。当时间限制被超出时，会极大降低用户体验，或无法进行数据刷新；当内存限制或储存限制被超出时BI报告将无法正常运行。1. 报告储存因素：报告大小限制：单个数据集有1G上限限制，简单理解，PBIX文件不可超过1G（可通过Premium等不同方案提升）单个工作区有10G上限限制官方文档连接请点击→这里。2. 数据刷新因素：数据源读取速度Power QueryDax生成的列、表其他（网关服务器性能等）时限：1小时内（Pro）内存限制：查看报告时的内存限制：由度量值复杂度决定刷新PBI数据集的内存限制：不同部署方式不同3. 报告查看因素：度量值、可视化渲染时限：5秒以下内存：本地开发文件内存上限既是电脑本身内存上限（一般不超16G）三、BI架构1. 星型模型建模2. 复杂模型 + Dax生成结果表3. 混合模型式"},{"title":"21-09-19_calculate","slug":"__3.++++Distilled++++Note__Power++++BI__21-09-19_calculate","shortSummary":"title: Calculate深度理解\nauthor: air.yan\npublished: true\ndate: 2021-09-19 17:41:57\nupdated:\nindex_img: /img/index_img/calculate_img.png\ncategory:Dax基石\ntags:\ntypora-root-url: ....\\public快速，正确的理解Calculate函数，应用到你的项目中。<!--more-->Calculatecalculate今天我们来研究一下Calculate函数。有人说Calculate函数是万能的，只要我学会了Calculate，遇事不决就Calculate就完了。不管这个函数好用不好用，怎么用，它存在的本身揭示了Dax引擎的核心理念：在Dax引擎中，或者说是在Power BI页面中，所有的计算都有且只有两步：先筛选，后计算。计算我们暂且不说，因为我相信有机会读这篇文章的同学们，小学数学都没有问题，而BI中用到的计算90%都是小学数学。所以呢，这篇文章先谈理解，谈谈这个“先筛选”是什么意思，以及如何改变筛选，之后再谈一些Calculate相关的高阶知识。为了通俗语言便于理解，本文中所有的“度量值计算（Measure Evaluation）”简称为“计算”，“筛选上下文（Filter Context）”简称为筛选。当然，在必要时我会引用全称。一、先筛选后计算Power BI中，所有的计算都是先筛选后计算。我们以下面两张图为例来讲解，图1标注了度量值，图2标注了筛选上下文。图1 - 标注度量值图2 - 标注筛选上下文在上图的例子中，我们可以看到最上方有一排切片器，左边有一堆卡片图，右边一个表格，构成非常简单。稍微值得注意的是，右方表格中，行里的项目名称是实体表中的一列数据，而表格中的TCV、Milestone进度等，是由不同的度量值组成的。可视化与计算项左侧指标图中，每一个可视化中的指标就是一次计算，一共10个可视化10次计算。右侧表格中，每一个\"单元格\"都是一次计算，一共有1个可视化 12 x 6 = 72 次计算。这11个可视化以及72个计算项就是我们要分析的目标。接下来，让我们看看下图中可视化与计算项所对应的筛选分别是什么。请注意我上一句的说法，在上述BI页面中，我们要研究的对象有两类，一类是可视化，另一类是可视化中的计算项。筛选上下文（Filter Context）上图切片器中，其中有两个被选择了，它们分别是① 产品类别 = “PS”与② 金额单位 = “百万”。这两个筛选（图中标注的①和③）被应用到了BI页面中的所有可视化上，这是一目了然的事情。为了确认，你还可以用你的鼠标移动到任意一个可视化图形上，右上角会出现一个漏斗式图标，这个图标会清晰的告诉你，这个可视化目前所收到的筛选有且只有两个，就是产品类别与金额单位。此处请划重点，对于可视化来说，它们的筛选上下文（Filter Context）就是漏斗图标中的筛选。左侧的可视化非常简单，受到外部筛选上下文的影响后，它们只进行一次计算，返回一个结果，因此我可以拍着胸脯告诉你，左侧10个指标图所受到的筛选上下文，就是漏斗图标中显示的筛选上下文。为了再次检验，同时为了让大家一目了然的看到后台代码，我用Dax Studio将左上角的指标图代码扒了出来。在下面代码中可见，在Define结构下面有俩个VAR变量，分别是我们刚刚确认的金额单位与项目。指标图代码：<span class=\"Comment\" style=\"color:#39a03b\">//DAXQuery</span><br><span class=\"Keyword\" style=\"color:#035aca\">DEFINE</span><br><span class=\"indent4\"></span><span class=\"Keyword\" style=\"color:#035aca\">VAR</span><span class=\"Variable\" style=\"color:#49b0af\">__DS0FilterTable</span>=<br><span"},{"title":"cheat-sheet","slug":"__3.++++Distilled++++Note__Power++++BI__cheat-sheet","shortSummary":"title: cheat_sheet\nauthor: air.yan\npublished: false\ntypora-root-url: ....\\public\ndate: 2021-09-21 12:29:27\nupdated:\nindex_img:\ncategory:\ntags:摘要<!--more-->✳✳✳✳✡✡✴✴✴✴<details>   \n    <summary>点击显示答案</summary>   \n    <pre>\n呱\n    </pre> \n</details>"},{"title":"0. 高效无坑的项目实施策略","slug":"__3.++++Distilled++++Note__Project++++Management__0.++++高效无坑的项目实施策略","shortSummary":"title: 高效无坑的项目实施策略\nauthor: air.yan\npublished: false\ntypora-root-url: ....\\public\ndate: 2021-09-05 11:28:14\nupdated: 2023-05-07 21:16:00\nindex_img: /img/index_img/project_plan.jpg\ncategory:\n- 项目管理\ntags:该策略为数据分析师提供从A到Z的BI项目实施步骤。<!--more-->高效无坑的项目实施策略![[Pasted image 20230423115706.png]]说在前面对于一个项目管理者，完美的项目规划是：资源调配期望管理需求管理计划与完成的交响曲项目管理者需要思考的问题是，需求是否合理，计划是否能按时完成，各方期望是否合适等等因素…… 但这篇文章并非写给项目管理者，而是献给各位前线BI战斗人员的一本策略秘籍。从前，我天真的认为，作为BI数据分析师，我们的工作内容就是完成BI开发，完成BI开发，完成BI开发，然后顺便就完成项目了，如此简单，闭门造车即可，大可无需瞻前顾后。但事实告诉我，没有原则的狂热开发者，全都死的很惨。是那种，开发的东西驴唇不对马嘴回炉重造的惨，不符合实际情况拆东墙补西墙的惨，客户要个小笼包但你送了个满汉全席结果吃不了的惨。技术只是一切的基础，基础很重要，非常重要！但除此以外，我们还需要掌握一整套为完成项目而制作的最佳实施策略，这个策略的最终目的就是：以最高的战斗效率，顺利完成项目。正所谓天下武功，唯快不破，让你的代码刀刀见血。通过读这篇文章，可能你会发现其中一些的事情是“项目经理”该做的事，或该承担的职责。请不要迷惑，我确认这篇文章的受众就是你，没错，数据分析师、ETL开发、BI开发。这些事项之所以会写到这里，是因为它们都是会严重影响到项目进度与效率的。如果你发现这些原则没有被遵守，或者步骤压根没有人来做，请挺身而出，为自己的代码伸张正义。这就是我之所以要写这篇文章的目的。要达到此目的，我们需要什么样的原则呢？让我们回顾一下传统的数据分析步骤，我们就从这些传统的步骤开始，逐步讲解如何做到高效无坑的项目实施法。传统的BI分析步骤：需求分析阶段蓝图设计阶段数据处理数据建模可视化数据验证项目交付[[1. 需求分析阶段]]\n[[2. 蓝图设计阶段]]二、数据处理1. 数据源确认1.1 事实表字段度量值计算方式维度及故事线1.2 维度表匹配关系/主外键完整性确认维护方式确认时间属性确认3. 难度分级了解项目难度属于哪个分级可以提前知晓项目的难度，工作所需时长，以及是否需要额外资源的加入。正确的了解难度，有助于正确预估工期，及时引入资源，避免尴尬的延期情况出现，偶尔也可以痛下狠心及时止损。3.1 数据类型难度L1 - 纯ExcelL2 - Excel + 现有中台网关搭建L3 - Excel + 无中台 需搭建考虑建立PBI存库数据库搭建ETL过程搭建网关搭建3.2 数据处理复杂度L1 - 简单导入L2 - 文件夹/Sheet合并与各种单表操作L3 - 多表多源Join/Union等连查处理（分摊/多事实表合并汇总统计）L4 -"},{"title":"1. 需求分析阶段","slug":"__3.++++Distilled++++Note__Project++++Management__1.++++需求分析阶段","shortSummary":"一、需求分析阶段**重要性：**✴✴✴<span style=\"color:#D93124\"> 请务必在实施过程未开始前，充 分 了 解 此部分信息。不要小瞧前期准备工作，如有疏漏，小则后期返工，大则全盘皆溃。 </span >需求分析阶段的主要参与角色为： #BusinessAnalyst\n- 负责与业务部门进行沟通，了解业务需求\n- 分析数据仓库的目标和功能需求\n- 将业务需求转化为技术需求1. 确认分析主题你需要做的是：了解目前已经定好的分析主题的内容，我是说从里到外了解它。在BI项目实施开启前，你需要明确知道，你要分析的内容是什么，如何分析它，怎么展现分析结果。如果你已经知道怎么做 了，那再好不过。如果你还不是特别清楚这块内容，请迅速找到大佬儿们借几个相关项目文件，学习其制作方式及业务理念，并在这次项目中大量套用模板。关于如何优秀的表达出你将要分析的内容，推荐书籍《Story Telling with Data》；关于财务模型常用的分析方式，请借鉴历史项目。1.1 分析主题及模块确认关于分析模块，举几个例子：利润资产负债资金账龄杜邦滚动预测其实，分析主题在项目开启前便已经定下了，在签合同的时候…… 所以这里并不是让你把主题定下来。你要讲这个主题切分成几个模块，可以在BI中合理展现的模块。一个模块下可以有多个页面。1.2 分析内容及方式确认像帕累托、对标、可比项之类的，这些不是分析主题，而是分析方式。借助它们可以帮助我们更好的展现分析主题。TODO：确认分析主题想好分析方式如果想不到，请先进行学习2. 确认关键角色![[Pasted image 20230423115932.png]]2.1 项目经理项目经理是一个项目中不可或缺的角色。BI项目中有可能有一个或两个项目经理，分别有可能是来自于甲方或乙方。也就是说，人员配备完全时，甲方乙方应各出一人作为项目经理/负责人，双方配合调动各方资源以确保项目的正常进行。对于你来说，这个人会时不时过来问你的进度，也会偶尔给你立立Flag，教你做做事。这时，如果你初出江湖，天赋异禀，请100%相信你的项目经理。反之，如果你对自己的技术坚信不疑，你相信你就是这帮人里最懂的人，那么你很可能需要疯狂的向上管理。因为只有你真正知道，做完这个需求要多久，风险有多大，方法是否好。2.2 最终需求确认人该角色一般是BI项目的最初发起人，也就是最开始提出想做BI的那个人。一个BI项目里，有至少一个人会提需求，我的意思是，你可能会收到来自不同部门、不同级别的人提出的各种各样的需求。这时候就有意思了，如果你都接了，你的报告就是一个四不像；如果你明智的有选择的接，你会发现需求中可能会有相互矛盾的点无法解决；如果你不接，小心被揍……所以呢，最开始我们就要明确，<span style=\"color:#D93124\">最终需求确认人有且只能有一位</span>，所有需求均由他来收集/提出。2.3 Power BI 管理员一般来说为了安全性考虑，企业的Power BI总管理账户会交给IT部门负责。在项目开发时，如果目标客户是第一次拥有Power BI账户，那么很可能需要对IT进行一系列的交接及培训等内容。2.4 维护者由于一个BI项目中会有多种角色加入进来，因此维护者角色也可能是多个：主数据信息维护者该部分财务人员偏多，财务相关的Mapping比较复杂，比较多变，因此维护的情况比较多；大部分业务主数据都是系统维护好的，所以也不需要人来维护中台数据库维护者BI项目实施中一般会涉及到中台的搭建，但关于数据方面的治理，库的搭建与管理，一般都是由甲方内部来自行完成的；乙方不敢，也不能保证一辈子将甲方的中台维护好。如果接了中台搭建，那么BI的开发工作量相对于中台来说，便是九牛一毛，那么此项目也就远远不仅仅是一个几个月就能完成的BI项目了。BI报告维护者维护者角色一般会有Power BI报表开发的权限及大部分数据权限。一般来说，可以由乙方直接承担，或由甲方发起项目的部门下的某业务人员、或将要培养的数据分析人员，承担该BI维护者责任。如乙方可承担该部分责任，自然不用多说。如无法承担，<span style=\"color:#D93124\">请最快速定位后续维护者，并积极将其拉入项目当中磨合</span>，以练习其技能及熟悉程度。如截止项目开发完成为止，尚未有维护者加入项目中熟悉该内容，该BI将面临无人维护，随时崩溃的一个状态。届时，请准备好接受甲方的折磨。假如你有多个项目处于该状态…… 请准备好你的痛苦面具TODO：项目经理确认双方的项目负责人及时与己方负责人沟通技术、时间风险点如果你很强，请积极向上管理，请千万别被动。如果有需要，参与到时间计划的订制中如果没有这个角色存在，那你更要严格遵循此文中的原则，承担该角色的任务最终需求确认人确认最终需求确认人多人提需求时，由该角色收集需求，最后由该角色统一提出需求确保项目开始至结束，你的需求确认人都健在…… 不接受任何其他人提出的需求Power BI 管理员确认管理者确认是否需要一系列的培训及交接（也许需要微软销售等介入）维护者确认各个角色的维护者积极将维护者拉入项目中，尽量由他们多承担任务，以便了解更多信息在项目进行中，双方总结维护者文档以便交接3. 确认终端用户![[Pasted"},{"title":"2. 蓝图设计阶段","slug":"__3.++++Distilled++++Note__Project++++Management__2.++++蓝图设计阶段","shortSummary":"二、蓝图设计阶段蓝图设计阶段主要的角色有：Data Architect / BI Architect 数据架构师 / BI架构师设计数据仓库和BI系统的整体架构，包括硬件、软件、网络和数据存储等方面，以确保系统具有良好的性能、可扩展性和安全性。制定数据仓库和BI系统的技术标准和最佳实践，为项目团队提供技术指导。评估和选择合适的技术和工具，包括数据库管理系统、ETL工具、报表工具等。与项目经理和需求分析师合作，确保技术架构满足业务需求。与数据建模师合作，确保数据模型与技术架构相匹配。协助数据仓库管理员进行系统性能调优、故障排查等工作。与ETL开发人员、报表开发人员和数据分析师等其他团队成员保持良好的沟通，确保技术架构能够满足各种需求。Data Modeler 数据建模师[[星型模型设计]]和BA紧密配合，确保模型符合业务需求1. 整体架构与技术方案设计硬件：服务器配置软件：ETL工具选型、数仓选型、BI选型等网络：网络环境设计服务器配置多少台服务器每台服务器所在的网络环境每台服务器承载的APP及功能数据流向与网络端口数仓管理平台选型：[[数仓工具选型]][[ETL工具选型]][[Olap引擎选型]][[BI工具选型]]数仓数据库选型：\n数据库：SQL ServerMySQL\n大数据引擎：Max ComputePower BI 部署方式Power BI DesktopPower BI ProPower BI Embedded / PremiumPower BI Report Server2. 数仓技术标准设计#ToDo 下面的标准都需要定制一下2.1 数据模型设计标准2.2 数仓数据获取标准2.3 数仓分层标准2.4 数仓存储过程标准2. 数据处理原则2.1 可持续Power Query是一个非常非常好用的数据处理工具，主要归功于他的UI界面的设计，轻便易懂，就连最白的小小白也能瞬间上手。但同时它的低门槛带来了一个严重的问题，大家都“自认为”会用Power Query了，没有人去看背后的代码，甚至中间的实现逻辑都懒得梳理…… 一些朋友给我看他们的处理方式时，在那里点点点，然后说，“瞧，这不是出来了，为什么换一个数据源就不对了？”。这个问题问到了Power Query的本质，他是BI系统展示数据前对数据进行的处理，因此这里的处理必须实现自动化。这种处理与大学做的一次性数分析项目不一样，必须注意一个原则：Power Query中的所有处理都是在制作Pipeline，没有什么是一次性的。什么样的数据处理是可持续的？只要做到以下几点，便算是可持续。多时间段数据更新无BUG（测试用数据应与开发用数据不同）非关键字段增减无BUG（逆透视也许会出问题）那我们如何做到可持续性呢？最简单的原则：检查每一步的数据处理逻辑及代码，是否在数据更新的情况下通用。2.2 易维护性这里的易维护性分为两部分，分别是mapping表的维护与代码的维护。mapping表如果需要人来维护的话，尽量将mapping做的越简单越好，这里会涉及到：一对多关系匹配列：内容上没什么难的。但一定要命名清楚，说明这一列就是用来做一对多匹配关系的<span"},{"title":"BI数仓项目流程","slug":"__3.++++Distilled++++Note__Project++++Management__BI数仓项目流程","shortSummary":"项目阶段分为：1. 需求分析阶段Business Analyst 业务分析师负责与业务部门进行沟通，了解业务需求分析数据仓库的目标和功能需求将业务需求转化为技术需求输出：指标2. 蓝图设计阶段Data Architect / BI Architect 数据架构师 / BI架构师设计数据仓库和BI系统的整体架构，包括硬件、软件、网络和数据存储等方面，以确保系统具有良好的性能、可扩展性和安全性。制定数据仓库和BI系统的技术标准和最佳实践，为项目团队提供技术指导。评估和选择合适的技术和工具，包括数据库管理系统、ETL工具、报表工具等。与项目经理和需求分析师合作，确保技术架构满足业务需求。与数据建模师合作，确保数据模型与技术架构相匹配。协助数据仓库管理员进行系统性能调优、故障排查等工作。与ETL开发人员、报表开发人员和数据分析师等其他团队成员保持良好的沟通，确保技术架构能够满足各种需求。Data Modeler 数据建模师[[星型模型设计]]和BA紧密配合，确保模型符合业务需求3. 开发实施阶段ETL DeveloperODS层数据抽取、Excel文件批量处理DWD、DIM、ADS层数据清洗与转换ETL PipelineTrigger/Schedule TaskFull Stack Engineer 全栈工程师Excel上传功能数据校验功能ETL 触发功能……BI Developer BI开发开发BI工具Data Analyst 数据分析师数据分析与挖掘可视化、报表制作4. 上线准备阶段5. 上线阶段"},{"title":"Python 学习资料","slug":"__3.++++Distilled++++Note__Python__Python++++学习资料","shortSummary":"#python #攻略1. PythonKaggle数据科学平台 - Python 免费攻略：免费快速上手，适合小白，适合喜欢自己研究类型的，适合边学边做的。快速上手，世界最强的数据科学平台。Jupyter Notebook式代码输入。B站 - Python 基础知识系统学习 - By Mosh：B站免费搬运课程，专业，系统，适合长时间学习。2. Anaconda / PyCharm / Jupyter-Notebook官网：Anaconda 官方网站\n官方文档：有问题找文档\nB站一站式教程，Anaconda + PyCharm + Python 安装与使用：一口气学完所有相关工具。2.1 步骤由于我们做的项目主要是数据分析类，所以我们用到的Python集成软件包是Anaconda（https://www.anaconda.com/）。下载后安装即可。其中我们主要会用到的是一款命令行工具 -- Conda 或者说 Anaconda Prompt。这款工具帮助我们的主要方式，是用来建立独立的虚拟环境（Virtual Environment），并在这个独立的python虚拟环境中安装不同的依赖包（Package）。打开conda后，我第一件事情就是，将pip与conda的网络镜像设定为国内清华站点，这样下载速度就会起飞。pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simpleconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/第二件事，创建自己的环境，可以参考下面网站。\nDocumentation\nCheatsheet第三件事，用Conda打开你的虚拟环境，安装依赖包：ETL神器Pandaspip install"},{"title":"22-04-05_py-etl-db","slug":"__3.++++Distilled++++Note__Python++++App__22-04-05_py-etl-db","shortSummary":"title: 搭建Python与MySQL环境\nauthor: air.yan\npublished: true\ndate: 2021-04-05 08:32:00\nupdated:\nindex_img: /img/index_img/py_etl_db.png\ncategory:Pythonic\ntags:\ntypora-root-url: ....\\public用免费的方式，从底层搭建BI架构，Python ETL与MySQL数据库。这是第一步，环境安装。<!--more-->搭建Python与MySQL环境一、Python环境搭建网上有很多类似攻略，也可自行查询。1. Anaconda -- Python的集成环境安装包由于我们做的项目主要是数据分析类，所以我们用到的Python集成软件包是Anaconda（https://www.anaconda.com/）。下载后安装即可。其中我们主要会用到的是一款命令行工具 -- Conda 或者说 Anaconda Prompt。这款工具帮助我们的主要方式，是用来建立独立的虚拟环境（Virtual Environment），并在这个独立的python虚拟环境中安装不同的依赖包（Package）。打开conda后，我第一件事情就是，将pip与conda的网络镜像设定为国内清华站点，这样下载速度就会起飞。pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simpleconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/第二件事，创建自己的环境，可以参考下面网站。Documentation：https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.htmlCheatsheet：https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf注意，在创建环境时，先不要选择Python3.9，用3.8目前比较稳定（是为了后续与SSAS内核连接做的考虑，其中的依赖包不支持3.9版本）。第三件事，用Conda打开你的虚拟环境，安装依赖包：ETL神器Pandaspip install pandasMySql Connector pymysqlpip install pymysql2. Pycharm 代码编辑器安装Pycharm Community环境，这款代码编辑器可以帮助你更好的编写python。https://www.jetbrains.com/pycharm/download/#section=windows注意，执行代码时，右下角的环境要选择为上面的虚拟环境。二、MySQL环境搭建这个攻略就更多了，也可以自行查询。我居然看了个印度口音的攻略，不习惯的请出门右转bilibili……https://www.youtube.com/watch?v=6dC0xjdIPZ01. MySQL 开发环境安装打开官网，点击MySQL Installer for Windows，下载后一步步安装即可。其中涉及到各种依赖包可以依次安装。2."},{"title":"MDC元数据中心","slug":"__3.++++Distilled++++Note__Python++++App__MDC元数据中心","shortSummary":"#TODO [[数据权限]]待设计Meta Data Center一、底层功能设计元数据中心是所有数仓应用的核心，有了它，就有了之后的可能性。CREATE SCHEMA mdc -- Meta Data Center目的：\n统一性：易分析平台是一款产品，以后所有项目都应用该产品，且该产品可以用最小修改量，对所有项目进行迭代更新（意思是产品只负责功能，对每个项目没有任何单独的写死的代码在里面。如果有，对该部分代码单独放在一个文件夹进行管控与调用）效率：简化一切从项目开始到结束，中间可被自动化的工作。目标人群不仅包括开发人员，还有BA，架构等，一切参与人。可配置性：功能可前台配置，项目参与人可随时调整版本记录：所有数据可记录版本，（数据版本管理 或 数据库备份）1.1 主题[!info] mdc.themes\n用来记录主题，以及每一个主题相对应的数据及时性要求CREATE TABLE mdc.themes (\n    theme_id INT identity(1, 1) NOT NULL PRIMARY KEY -- 主题ID\n    , theme_name VARCHAR(50) NOT NULL -- 主题\n"},{"title":"分摊与重分类","slug":"__3.++++Distilled++++Note__Python++++App__分摊与重分类","shortSummary":"1. 业务需求财务的分摊无非就是把一行数变成多行数的过程，在这个过程中，数字的总数不变，有可能会维度增加，也有可能不增加维度但某维度的颗粒度会变得更细。这个分摊的过程，由于业务本质的原因，通常都是用某些指标在某些维度中的权重来作为分摊依据的。2. 设计方向#ToDo  +++ 底层逻辑，怎么冲的在提供分摊逻辑前，我们需要提供的基础信息有：数据库的链接方式，用户名与密码目标表表名，包括库名，模式名以及表名（由于分摊将于原表上进行，因此请提前准备好该表）接下来，对于分摊逻辑，我们需要做的事情大致如下：设定每次分摊，被分摊数字的范围 => 源筛选设定每次分摊，需要分摊到的维度 => 目标维度设定每次分摊，分摊的方式 => 权重值的计算方式[!Info]\n因此，我们设定了如下的系统表格，来记录每一条分摊的规则：amort_id：分摊ID，用来记录分摊的amort_flag：分摊标识，用来记录数据是否已经被分摊source_filter_{dim}：源筛选，用来==定位被分摊的数据==amort_to_dim：目标维度，用来==定位分摊到的维度字段=={more rules}：更多规则字段，用来描述分摊的颗粒度，权重等具体规则start_date：启用时间，规定生效范围end_date：结束时间，规定生效范围接下来，我们就会就以上参数进行详细介绍。2.1 分摊IDamort_id 是一个需要在事实表中的额外建立的字段，该字段要在 insert 语句生成分摊数据时，对数据进行记录，保证每一条数据都有对应的规则可以回查。2.2 分摊标识amort_flag 分摊标识也是一个需要在事实表中建立的字段，与 amort_id 不同的是，该字段并不在 insert 语句中，而在 update 语句中。amort_flag 的作用是，标记出目标数据是否==已经被分摊==了，如果程序检测到数据已经被分摊过了，那么就没有必要对该数据再进行二次分摊，而是去找没有被分摊过的数据进行处理。对于某些数据，需要分摊两次，比如说，该数据就是手工总部调整，需要分摊到产品线后再分摊渠道，那么分摊程序需要对第一次分摊前的数据的 amort_flag 打标 'Y'，这样第二次分摊时，才会正确的取到第一次分摊后的数据。2.3 源筛选source_filter_{dim} 在分摊参数表中，代表了多个字段，其中的dim占位符，可以替换成任意事实表中的维度进行分摊（需要在事实表中存在）。该筛选要包含=, <>, In, Not In，四种筛选逻辑。 #ToDo 增加LIKE匹配逻辑。[!tip]\n分摊:小技巧1：在第二次分摊时，在源筛选 source_filter_{dim} 中，增加一个 amort_id"},{"title":"数据权限","slug":"__3.++++Distilled++++Note__Python++++App__数据权限","shortSummary":""},{"title":"BI工具选型","slug":"__3.++++Distilled++++Note__工具选型__BI工具选型","shortSummary":"| 序号 | 特点                | Power BI                  "},{"title":"ETL工具选型","slug":"__3.++++Distilled++++Note__工具选型__ETL工具选型","shortSummary":"|  | 特点                 | Python                 | Kettle"},{"title":"Olap引擎选型","slug":"__3.++++Distilled++++Note__工具选型__Olap引擎选型","shortSummary":"| 特点 | Hyper | Vertipaq | Hologres |\n| --- | --- | --- | --- |\n| 数据存储 | 行式存储 | 列式存储 | 列式存储 |\n| 压缩算法 | 有 | 有 | 有 |\n| 支持的数据源 | 多种数据源，包括关系型数据库、NoSQL数据库和各种文件格式 | 多种数据源，包括关系型数据库、在线服务和本地文件 | 多种数据源，包括关系型数据库、半结构化数据和非结构化数据"},{"title":"数仓工具选型","slug":"__3.++++Distilled++++Note__工具选型__数仓工具选型","shortSummary":"CSD易分析数仓平台\n阿里Dataphin数仓平台\n阿里Dataworks数仓平台\n微软Azure Synapse数仓平台"},{"title":"钰真","slug":"__9.++++Project++++Space__Pre-Sales__钰真","shortSummary":"1. 可视化技术框架数据量数据时效性 T+1数据历史历史数据统一性架构 1/2/3ODS层：月增百万以内月增百万月增千万ADS层：百万以内：可支持直连 或 导入百万以上：可支持导入限制：整体不超过1亿财务数据的支持问题"},{"title":"pareto.jpg","slug":"__img__index_img__pareto.jpg","shortSummary":""},{"title":"index","slug":"__index","shortSummary":"What is MindStone?MindStone is a free open-source alternative solution to Obsidian PublishHere how it look like once published:This website include a published version of default Obsidian Help vault, [[Start here]]MindStone features:✅ Drop-in support for (default) Obsidian Vault✅ [[Wiki Link]] built-in support✅ Folder-base navigation"},{"title":"Ladder","slug":"__Ladder","shortSummary":"服务器供应商地址https://clients.hostwinds.com/cloud/instance_details.php?serviceid=1064095用户名： airyan030@163.com\n密码：Er159357https://www.toolsdaquan.com/ipcheck/\nIP检测服务器信息mail.163.comV2Ray设置---------- V2Ray vmess URL / V2RayNG v0.4.1+ / V2RayN v2.1+ / 仅适合部分客户端 ----------vmess://ewoidiI6ICIyIiwKInBzIjogIjIzM3YyLmNvbV8xMDQuMTY4LjEzNi4xOTciLAoiYWRkIjogIjEwNC4xNjguMTM2LjE5NyIsCiJwb3J0IjogIjI0NTQxIiwKImlkIjogIjJlODIyZjg2LTRmNDItNGJlOS1hZDk0LTI2MWMzYTZjZWIxZCIsCiJhaWQiOiAiMCIsCiJuZXQiOiAidGNwIiwKInR5cGUiOiAibm9uZSIsCiJob3N0IjogIiIsCiJwYXRoIjogIiIsCiJ0bHMiOiAiIgp9Cg==How to fix ISP block:\nI would first recommend you read this guide https://www.vps234.com/hostwinds-ip-blocked-fix-isp/Then check your IP here https://www.vps234.com/ipchecker/"},{"title":"Obsidian","slug":"__Obsidian","shortSummary":"Links [[]]\nHashtags #Types of notes:Fleeting Note: Raw (Daily Raw)Literature Note (Research and studies, should be written in your own words, the most detailed part of your note)Permanent Note (the most distilled note in Zettelkasten, a single idea in just a"},{"title":"最佳实践方案","slug":"__最佳实践方案","shortSummary":""}],"edges":[{"source":"__1.++++Daily++++Notes__2023-05-03","target":"__3.++++Distilled++++Note__工具选型__Olap引擎选型"},{"source":"__3.++++Distilled++++Note__Case++++Study__Case++++Study++++-++++天创","target":"__3.++++Distilled++++Note__Project++++Management__BI数仓项目流程"},{"source":"__3.++++Distilled++++Note__Case++++Study__Case++++Study++++-++++天创","target":"__3.++++Distilled++++Note__Datawarehouse++++Design__数仓事实表设计"},{"source":"__3.++++Distilled++++Note__Case++++Study__Case++++Study++++-++++天创","target":"__3.++++Distilled++++Note__Datawarehouse++++Design__数据源标签设计"},{"source":"__3.++++Distilled++++Note__Case++++Study__Case++++Study++++-++++天创","target":"__3.++++Distilled++++Note__Datawarehouse++++Design__数仓维度表设计"},{"source":"__3.++++Distilled++++Note__Case++++Study__Case++++Study++++-++++天创","target":"__3.++++Distilled++++Note__Datawarehouse++++Design__ETL++++Pipeline设计"},{"source":"__3.++++Distilled++++Note__Case++++Study__Case++++Study++++-++++天创","target":"__3.++++Distilled++++Note__Datawarehouse++++Design__校验设计"},{"source":"__3.++++Distilled++++Note__Case++++Study__Case++++Study++++-++++天创","target":"__3.++++Distilled++++Note__Datawarehouse++++Design__Log设计"},{"source":"__3.++++Distilled++++Note__Case++++Study__Case++++Study++++-++++天创","target":"__3.++++Distilled++++Note__Python++++App__分摊与重分类"},{"source":"__3.++++Distilled++++Note__Datawarehouse++++Design__数仓维度表设计","target":"__3.++++Distilled++++Note__Datawarehouse++++Design__渐变维度设计"},{"source":"__3.++++Distilled++++Note__Project++++Management__0.++++高效无坑的项目实施策略","target":"__3.++++Distilled++++Note__Project++++Management__1.++++需求分析阶段"},{"source":"__3.++++Distilled++++Note__Project++++Management__0.++++高效无坑的项目实施策略","target":"__3.++++Distilled++++Note__Project++++Management__2.++++蓝图设计阶段"},{"source":"__3.++++Distilled++++Note__Project++++Management__2.++++蓝图设计阶段","target":"__2.++++Literature++++and++++Topic++++Notes__星型模型设计"},{"source":"__3.++++Distilled++++Note__Project++++Management__2.++++蓝图设计阶段","target":"__3.++++Distilled++++Note__工具选型__数仓工具选型"},{"source":"__3.++++Distilled++++Note__Project++++Management__2.++++蓝图设计阶段","target":"__3.++++Distilled++++Note__工具选型__ETL工具选型"},{"source":"__3.++++Distilled++++Note__Project++++Management__2.++++蓝图设计阶段","target":"__3.++++Distilled++++Note__工具选型__Olap引擎选型"},{"source":"__3.++++Distilled++++Note__Project++++Management__2.++++蓝图设计阶段","target":"__3.++++Distilled++++Note__工具选型__BI工具选型"},{"source":"__3.++++Distilled++++Note__Project++++Management__2.++++蓝图设计阶段","target":"__最佳实践方案"},{"source":"__3.++++Distilled++++Note__Project++++Management__2.++++蓝图设计阶段","target":"__2.++++Literature++++and++++Topic++++Notes__星型模型设计"},{"source":"__3.++++Distilled++++Note__Project++++Management__BI数仓项目流程","target":"__2.++++Literature++++and++++Topic++++Notes__星型模型设计"},{"source":"__index","target":"/"}]}